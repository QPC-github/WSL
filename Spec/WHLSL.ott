metavar x, y, z, f ::=
indexvar i, j, k, n, m ::=

grammar
td :: top_level_decl_ ::= {{com top-level declaration}}
    | tval f ( tval0 x0 , .. , tvalm xm ) { s0 .. sn } :: :: func_decl
    | typedef x = tval ; :: :: typedef

tparam :: type_parameter_ ::= {{com type parameter}}
    | tval x :: :: constexpr
    | x : y0 + .. + yn :: :: type_variable

dpid :: divergence_point_identifier_ ::=

s :: stmt_ ::= {{com statement}}
    | if ( e ) s :: :: if_then {{com Desugared}}
    | while ( e ) s :: :: while {{com Desugared}}
    | for ( eOrVDecls ; eOrNothing ; eOrNothing' ) s :: :: for {{com partly desugared}}
    | for dpid ( ; e ; e' ) s :: :: for_desugared
    | tval vdecl0 , .. , vdecln ; :: :: multi_vdecls {{com partly desugared}}
    | ; :: :: empty {{com Desugared}}
    | if dpid ( e ) s else s' :: :: if
    | do dpid s while ( e ) ; :: :: do_while
    | switch dpid ( e ) { sc0 : sblock0 .. scn : sblockn } :: :: switch
    | break ; :: :: break
    | continue ; :: :: continue
    | fallthrough ; :: :: fallthrough
    | return e ; :: :: return
    | return ; :: :: return_void
    | { blockAnnot s0 .. sn } :: :: block
    | e ; :: :: effectful_expr
    | tval x : sid ; :: :: resolved_vdecl {{com post-monomorphisation variable declaration}}
    | tval x : sid = e ; :: :: resolved_init_vdecl {{com post-monomorphisation}}
    | Loop ( s , s' , s'' ) :: :: loop_construct {{com Special, only during execution}}
    | Cases ( s0 , .. , sn ) :: :: cases_construct {{com Special, only during execution}}
    | Join ( s ) :: :: join_construct {{com Special, only during execution}}
%TODO: make the dpid less visible/obnoxious.
% Maybe also make it more explicit the allocation of new identifiers?

sc :: switch_case_ ::=
    | case rval :: :: case
    | default :: :: default

sblock :: switch_block_ ::=
    | s0 .. sn :: :: statements

vdecl :: variable_declaration_ ::=
    | x :: :: uninitialized
    | x = e :: :: initialized

eOrVDecls :: expr_or_vdecl_ ::=
    | e :: :: expr
    | tval vdecl0 , .. , vdecln :: :: vdecl
    | :: :: nothing

eOrNothing :: expr_or_nothing_ ::=
    | e :: :: expr
    | :: :: nothing

blockAnnot :: block_annotation_ ::=
    | R :: :: exec_env {{tex _{[[R]]} }}
    | :: :: nothing

e :: expr_ ::= {{com expression}}
    | ( e ) :: :: parens
    | e , e' :: :: comma
    | e || dpid e' :: :: or {{tex [[e]]\:{||}\:[[e']]}}
    | e && dpid e' :: :: and {{tex [[e]]\:{\&\&}\:[[e']]}}
    | e0 ? dpid e1 : e2 :: :: ternary {{tex [[e0]]\:{?}\:[[e1]]:[[e2]]}}
    | ! e :: :: not {{tex \:![[e]]}}
    | e == e' :: :: equals_operator
    | e != e' :: :: not_equals_operator {{com Desugared}} {{tex [[e]]\;!\mkern-\thickmuskip=[[e']]}}
    | e = e' :: :: assignment
    | x :: :: variable_name
    | * e :: :: ptr_deref
    | & e :: :: address_taking
    | @ e :: :: array_reference_making
    | e [ e' ] :: :: array_deref
    | e .foo :: :: field_access
    | e ++ :: :: postfix_incr
    | e1 += e2 :: :: plus_equal
    | operator+ ( e1 , e2 ) :: :: operator_plus
    | operator[]= ( e1 , e2 , e3 ) :: :: operator_indexed_setter
    | operator[] ( e1 , e2 ) :: :: operator_indexed_getter
    | operator&[] ( e1 , e2 ) :: :: operator_indexed_ander
    | operator.foo= ( e1 , e2 ) :: :: operator_setter
    | operator.foo ( e1 ) :: :: operator_getter
    | operator&.foo ( e1 ) :: :: operator_ander
    | x ( e0 , .. , en ) :: :: call
    | fid ( e0 , .. , em ) :: :: resolved_call {{com post-monomorphisation, calls are resolved, and pure type arguments are gone}}
    | integerLiteral :: :: int_literal
    | val :: :: val {{com only during exec, except literals}}
    | Call s :: :: call_construct {{com only during exec}}
    | JoinExpr ( e ) :: :: join_expr_construct {{com only during exec}}

val :: val_ ::=
    | rval :: :: rval
    | LVal ( addr ) :: :: lval
    | Invalid_LVal :: :: invalid_lval {{com corresponds to null and out-of-bounds accesses}}

addr :: addr_ ::=
    | addr + i * stride :: :: add_multiple_stride
    | sid :: :: sid
    | freshAddress() :: :: fresh_addr

targ :: type_argument_ ::= {{com type argument}}
    | x :: :: ident {{com either a type or a constexpr}}
    | tval :: :: type {{com a type that is not just an identifier}}
    | x . y :: :: enum_value {{com a field of an enum, for a constexpr type parameter}}

G {{tex \Gamma}} , Gglobal {{tex \Gamma_{global} }} :: env_ ::= {{com typing environment}}
    | G [ x -> envMapping ] :: :: update {{com $\Gamma$ with the mapping for x replaced by envMapping}}
    | { x0 -> envMapping0 , .. , xn -> envMappingn } :: :: set

envMapping :: env_mapping_ ::= 
    | t :: :: var {{com $x$ is of type $\tau$}}
    | Nothing :: :: nothing {{tex \emptyset}} {{com to remove $x$ from $\Gamma$}}
% TODO: make the typing environment explicit.
% It should have three components: one for variables, one for functions and one for types

B :: behaviour_ ::= {{com statement behaviour}}
    | { b0 , .. , bn } :: :: set
    | B + B' :: :: union {{tex [[B]] \cup [[B']]}}
    | B \ B' :: :: difference {{tex [[B]] \backslash [[B']]}}
    | U B0 .. Bn :: :: big_union
    | ( B ) :: :: parens

b :: single_behaviour_ ::=
    | Return tval :: :: return
    | Break :: :: break
    | Continue :: :: continue
    | Fallthrough :: :: fallthrough
    | Nothing :: :: Nothing

t {{tex \tau}} :: type_ ::= {{com type}}
    | LVal ( tval , addressSpace ) :: :: lval {{com left value}}
    | ALVal ( tval ) :: :: abstract_lval {{com abstract left value}}
    | tval :: :: tval {{tex [[tval]] }}
tval {{tex {\tau^{val} } }} :: type_value_ ::=
    | Ptr ( tval , addressSpace ) :: :: ptr {{com pointer}}
    | Ref ( tval , addressSpace ) :: :: array_ref {{com array reference}}
    | [ tval ] :: :: array {{com array}}
    | bool :: :: bool
    | uint32 :: :: uint32 {{tex \textbf{uint32} }}
    | void :: :: void
    | TVar tid namedSigs :: :: tvar
addressSpace, as :: address_space_ ::=
    | thread :: :: thread
    | threadgroup :: :: threadgroup
    | device :: :: device
    | constant :: :: constant
tid :: type_identifier_ ::=

rval, rv :: rval_ ::=
    | Ptr ( addr ) :: :: ptr 
    | Ref ( addr , j ) :: :: ref {{com Reference to array of size j}}
    | null :: :: lit_null
    | true :: :: lit_true
    | false :: :: lit_false
    | uint :: :: lit_uint {{com unsigned integer literal}}
    | i :: :: int_exec {{com integer at execution time}}
    | 1 :: :: lit_one {{com the integer one}}
    | TrapValue :: :: trap {{com Special, represents a caught error (e.g. out-of-bounds access)}}
    | Void :: :: void {{com Special, the return value of a void function call}}

R {{tex \rho}}, Rout {{tex \rho_{out} }} :: exec_env_ ::= {{com execution environment}}
    | R [ x0 -> val0 , .. , xn -> valn ] :: :: update_with_vals
    | Empty :: :: empty {{tex \emptyset}}

E :: memory_event_ ::= {{com memory event}}
    | :: :: nothing
    | addr <- rval :: :: store {{com store}}
    | addr -> rval :: :: load {{com load}}
    | Sequence ( E0 , .. , En ) :: :: multiple_events

S :: divergence_stack_ ::= {{com divergence stack}}
    | :: :: nothing
    | push ( rval , dpid ) :: :: push
    | pop ( ) :: :: pop

fid :: function_identifier_ ::=

terminals :: terminals_ ::=
    | U :: :: big_union {{tex \bigcup}}
    | |- :: :: vdash {{tex \vdash}}
    | <- :: :: load {{tex \leftarrow}}
    | -> :: :: mapsto {{tex \mapsto}}
    | --> :: :: desugars {{tex \leadsto}}
    | in :: :: in {{tex \in}}
    | \/ :: :: math_or {{tex \vee}}
    | /\ :: :: math_and {{tex \wedge}}
    | <= :: :: math_lesser_equal {{tex \leq}}
    | >= :: :: math_greater_equal {{tex \geq}}

formula :: formula_ ::=
    | judgement :: :: judgement
    | formula0 /\ .. /\ formulan :: :: several_formula
    | formula \/ formula' :: :: or
    | n > 0 :: :: int_positive
    | x -> envMapping in G :: :: env_mapping_exists
    | x not in G :: :: env_mapping_missing {{tex [[x]] \not\in [[G]]}}
    | G |- isIntegerOrEnum ( tval ) :: :: is_integer
    | G |- sc0 .. scn fully covers tval :: :: full_switch_coverage % TODO: make it explicit
    | s != s' :: :: stmt_not_eq {{tex [[s]] \neq [[s']]}}
    | tval != tval' :: :: tval_not_eq {{tex [[tval]] \neq [[tval']]}}
    | as != as' :: :: address_space_not_eq {{tex [[as]] \neq [[as']]}}
    | b in B :: :: behaviour_in {{tex [[b]] \in [[B]]}}
    | b not in B :: :: behaviour_not_in {{tex [[b]] \not\in [[B]]}}
    | G = G' :: :: typing_env_eq
    | B = B' :: :: behaviour_eq
    | namedSigs = namedSigs' :: :: named_signature_eq
    | sig = sig' :: :: sig_eq
    | e = e' :: :: expr_eq
    | e != e' :: :: expr_neq {{tex [[e]] \neq [[e']]}}
    | exists i . formula :: :: exists_int
    | i <= n :: :: indexvar_leq
    | i >= n :: :: indexvar_geq
    | i < n :: :: indexvar_lesser
    | i > n :: :: indexvar_greater
    | x -> val in R :: :: val_in_env
    | fid -> ( y0 : addr0 , .. , ym : addrm ) { s0 .. sk } :: :: fid_resolving
    | E = E' :: :: event_eq
    | R = R' :: :: exec_env_eq
    | s = s' :: :: stmt_eq
    | addr = addr' :: :: address_eq
    | rv not in sc0 .. scn :: :: rval_not_in_cases % TODO: fix typesetting
    | s = { sblock } :: :: block_from_switch_block
    | rv = Default ( tval ) :: :: default_value
    | s is a terminator :: :: stmt_is_terminator
    | rval a valid value for this type :: :: valid_value
    | rval not a valid value for this type :: :: invalid_value
    | e has a left value type :: :: has_left_value_type
    | e has not a left value type :: :: has_not_left_value_type
    | e is an abstract left value :: :: cannot_reduce_abstract_left_value
    | e has an array reference type :: :: has_array_reference_type
    | e does not have an array reference type :: :: has_not_array_reference_type
    | addr = freshAddress() :: :: make_fresh_address

defns
desugaring :: '' ::=
defn
s --> s' :: :: desugaring_stmt :: '' {{com Desugaring statements}} by

    ----------------------------- :: if_then
    if (e) s --> if dpid (e) s else {}

    -------- :: empty_stmt
    ; --> {}

    -------------------------------------- :: while
    while (e) s --> if (e) do dpid s while (e);

    -------------------------------------------------------------------------- :: for_empty_cond
    for (eOrVDecls ; ; eOrNothing) s --> for (eOrVDecls ; true ; eOrNothing) s

    --------------------------------------------------------------------------- :: for_empty_incr
    for (eOrVDecls ; e ; ) s --> for (eOrVDecls ; e ; null) s

    ------------------------------------------------- :: for_init_expr
    for (e ; e' ; e'') s --> {e; for ( ; e' ; e'') s}

    ------------------------------------------------------------------------------------------ :: for_init_vdecls
    for (tval vdecl0 , .. , vdecln ; e' ; e'') s --> {tval vdecl0 , .. , vdecln; while(e') {s e'';}}

    k > 0
    -------------------------------------------------------------------------------------- :: multiple_vdecls
    { s0..sn tval vdecl0, vdecl1, .., vdeclk; s'0..s'm} --> {s0..sn tval vdecl0; tval vdecl1, .., vdeclk; s'0..s'm}

% TODO: also desugar syntactic types that have an addressSpace as a prefix.
% Also make it an error to have an addressSpace and neither array ref nor ptr.

defns
typing :: '' ::=
defn
G |- s : B :: :: typing_statement :: '' {{com Validating statements' behaviours}} {{tex [[G]] \vdash [[s]] : [[B]]}} by

    G |- e : bool
    G |- s : B
    G |- s' : B'
    B'' = (B + B')
    Return Ptr(tval, as) not in B''
    Return Ref(tval, as) not in B''
    -------------------------------- :: if
    G |- if dpid (e) s else s' : B''

    G |- e : bool
    G |- s : B
    Return Ptr(tval, as) not in B
    Return Ref(tval, as) not in B
    Break in B
    --------------------------------------------------------------- :: do_while_break
    G |- do dpid s while (e); : (B \ {Break, Continue}) + {Nothing}

    G |- e : bool
    G |- e' : t
    G |- s : B
    Return Ptr(tval, as) not in B
    Return Ref(tval, as) not in B
    Break in B
    --------------------------------------------------------------- :: for_break
    G |- for dpid (;e;e') s : (B \ {Break, Continue}) + {Nothing}

    G |- e : bool
    G |- s : B
    Return Ptr(tval, as) not in B
    Return Ref(tval, as) not in B
    Break not in B
    ------------------------------------------ :: do_while_no_break
    G |- do dpid s while (e); : B \ {Continue}

    G |- e : bool
    G |- e' : t
    G |- s : B
    Return Ptr(tval, as) not in B
    Return Ref(tval, as) not in B
    Break not in B
    ------------------------------------------ :: for_no_break
    G |- for dpid (;e;e') s : B \ {Continue}

    G |- e : tval
    G |- isIntegerOrEnum(tval)
    G |- sc0: tval /\ .. /\ G |- scn: tval
    G |- sc0 .. scn fully covers tval
    G |-- sblock0: B0 /\ .. /\ G |-- sblockn: Bn
    B = U B0 .. Bn
    Fallthrough not in Bn
    Nothing not in B
    Break in B
    Return Ptr(tval, as) not in B
    Return Ref(tval, as) not in B
    ---------------------------------------------------------------------------------------------- :: switch_break
    G |- switch dpid (e) {sc0: sblock0 .. scn : sblockn } : (B \ {Break, Fallthrough}) + {Nothing}

    G |- e : tval
    G |- isIntegerOrEnum(tval)
    G |- sc0: tval /\ .. /\ G |- scn: tval
    G |- sc0 .. scn fully covers tval
    G |-- sblock0: B0 /\ .. /\ G |-- sblockn: Bn
    B = U B0 .. Bn
    Fallthrough not in Bn
    Nothing not in B
    Break not in B
    Return Ptr(tval, as) not in B
    Return Ref(tval, as) not in B
    ------------------------------------------------------------------------- :: switch_no_break
    G |- switch dpid (e) {sc0: sblock0 .. scn : sblockn } : B \ {Fallthrough}

    --------------------- :: break
    G |- break; : {Break}

    --------------------------- :: continue
    G |- continue; : {Continue}

    --------------------------------- :: fallthrough
    G |- fallthrough; : {Fallthrough}

    G |- e : tval
    ------------------------------ :: return
    G |- return e; : {Return tval}

    ----------------------------- :: return_void
    G |- return ; : {Return void}

    ------------------ :: empty_block
    G |- {} : {Nothing}

    tval != Ptr(tval', as)
    tval != Ref(tval', as)
    G[x -> LVal(tval, thread)] |- {s0 .. sn} : B
    s0 != tval' x; /\../\ sn != tval' x;
    s0 != tval' x = e'; /\../\ sn != tval' x = e';
    -------------------------------------------- :: variable_decl
    G |- {tval x; s0 .. sn} : B
    % Note: the last two premises prevent redeclaration of a variable in the same scope it was declared in.
    % Implemented naively it takes O(n**2) to check, but can easily be optimized.

    G[x -> LVal(tval, thread)] |- e : tval
    G[x -> LVal(tval, thread)] |- {s0 .. sn} : B
    s0 != tval' x; /\../\ sn != tval' x;
    s0 != tval' x = e'; /\../\ sn != tval' x = e';
    -------------------------------------------- :: variable_decl_init
    G |- {tval x = e; s0 .. sn} : B
    % TODO: add support for threadgroup variables (here and in the other rules related to variable declarations)

    G |- s : B
    ------------ :: trivial_block
    G |- {s} : B

    G |- s : B
    G |- {s1 .. sn} : B'
    n > 0
    Fallthrough not in B
    Nothing in B
    -------------------------------------- :: block
    G |- {s s1 .. sn} : (B \ {Nothing}) + B'

    G |- e : t
    ------------------- :: expr
    G |- e; : {Nothing}

defn
G |- sc : tval :: :: typing_switch_case :: '' by

    G |- rval : tval
    --------------------- :: case
    G |- case rval : tval

    ------------------- :: default
    G |- default : tval

defn
G |-- sblock : B :: :: typing_switch_block :: '' {{tex [[G]] \vdash [[sblock]] : [[B]]}} by

    G |- { s0 .. sn } : B
    --------------------- :: switch_block
    G |-- s0 .. sn : B

defn
G |- e : t :: :: typing_expr :: '' {{com Typing expressions}} {{tex [[G]] \vdash [[e]] : [[t]]}} by

    -------------------------- :: null_lit_array_ref
    G |- null : Ref (tval, as)

    -------------------------- :: null_lit_ptr
    G |- null : Ptr (tval, as)

    ---------------- :: literal_true
    G |- true : bool

    ----------------- :: literal_false
    G |- false : bool

    G |- e : t
    ------------ :: parens
    G |- (e) : t

    G |- e : t
    G |- e' : tval'
    ------------------ :: comma
    G |- e, e' : tval'

    G |- e : bool
    G |- e' : bool
    ------------------------- :: or
    G |- e || dpid e' : bool

    G |- e : bool
    G |- e' : bool
    ------------------------ :: and
    G |- e && dpid e' : bool

    G |- e0 : bool
    G |- e1 : tval
    G |- e2 : tval
    tval != Ptr(tval', as)
    tval != Ref(tval', as)
    ------------------------------ :: ternary
    G |- e0 ? dpid e1 : e2 : tval

    G |- e : bool
    -------------- :: not
    G |- !e : bool

    G |- e : ALVal(tval)
    G |- e' : tval
    tval != Ptr(tval', as')
    tval != Ref(tval', as')
    ----------------------- :: assignment
    G |- e = e' : tval

    G |- e : ALVal (tval)
    --------------------- :: alval_to_rval
    G |- e : tval

    G |- e: LVal(tval, as)
    as != constant
    ---------------------- :: lval_to_alval
    G |- e: ALVal(tval)

    G |- e : LVal(tval, as)
    ----------------------- :: lval_to_rval
    G |- e : tval

    x -> t in G
    ----------- :: variable_name
    G |- x : t

    G |- e : LVal(tval, as)
    ----------------------- :: address_taking
    G |- &e : Ptr(tval, as)
    % can the unary operator & be overloaded?
    % It seems that no

    G |- e : Ptr(tval, as)
    ------------------------ :: ptr_deref
    G |- *e : LVal(tval, as)
    % can the unary operator * be overloaded?
    % It seems that no

    % Note: We currently do not have any special interaction between pointers and array references in these rules
    
    G |- e : LVal(tval, as)
    ----------------------- :: take_ref_lval
    G |- @e : Ref(tval, as)
    % Note: in the execution rules, the behaviour depends on whether that LVal points to an array, but here we don't need to track it.

    G |- e : [tval]
    G |- e' : uint32
    ----------------- :: array_index_rval
    G |- e[e'] : tval
    % There is a choice between applying array_index_lval and then lval_access, or lval_access and then array_index_rval.
    % It is not problematic, because the rules are confluent, so either choice leads to the same result.
    % TODO: should we refuse during validation the case where e' is a constant that falls out of the bounds of e ?
    % I think it should be an allowed behaviour but not required of the implementation.

    G |- e : LVal([tval], as)
    G |- e' : uint32
    --------------------------- :: array_index_lval
    G |- e[e'] : LVal(tval, as)

    G |- e : Ref(tval, as)
    G |- e' : uint32
    --------------------------- :: array_ref_index
    G |- e[e'] : LVal(tval, as)

    G |- e : ALVal(tval)
    G |- operator+(e, integerLiteral) : tval
    -------------------------------- :: postfix_incr
    G |- e ++ : tval

    G |- e1 : ALVal(tval1)
    G |- e2: tval2
    G |- operator+(e1, e2) : tval1
    ------------------------------ :: operator_plus_equal
    G |- e1 += e2 : tval1

    % G |- e0 : tval0 /\../\ G |- en : tvaln
    % x -> Func{sig0, .., sigk} in G
    % exists i . sigi = (tval0, .., tvaln) -> tval
    % -------------------------------------------------- :: call_no_targ
    % G |- x (e0, .., en) : tval
    % TODO: add an updated formal rule for function calls

defns
exec :: '' ::=
defn
R |- e => e' ; E ; S :: :: exec_expr_alval :: '' {{com Small-step reduction to an abstract left value}} {{tex [[R]] \Vdash [[e]] \xrightarrow[ [[S]] ]{[[E]]} [[e']]}} by

    R |- e => e' ; E ; S
    ---------------------------- :: alval_dot_reduce
    R |- e.foo => e'.foo ; E ; S

    e.foo has a left value type
    e = LVal(addr) \/ e = Invalid_LVal
    ------------------------------------ :: alval_dot_ander
    R |- e.foo => * operator&.foo(&e) ;;

    R |- e1 => e1' ; E ; S
    ------------------------------ :: alval_array_reduce_left
    R |- e1[e2] => e1'[e2] ; E ; S

    e1 is an abstract left value
    e1 has an array reference type
    R |- e1 -> e1' ; E ; S
    ------------------------------ :: alval_array_ref_reduce
    R |- e1[e2] => e1'[e2] ; E ; S

    R |- e2 -> e2' ; E ; S
    e1 is an abstract left value
    e1 does not have an array reference type \/ e1 = rval
    ----------------------------------------------- :: alval_array_reduce_right
    R |- e1[e2] => e1[e2'] ; E ; S

    --------------------------------- :: array_null_access
    R |- null [i] => Invalid_LVal ;;

    i >= k
    j < k
    ----------------------------------------------------- :: array_ref_clamped
    R |- Ref(addr, k) [i] => Ref(addr, k) [j] ;;

    i >= j
    ----------------------------------------- :: array_ref_invalid
    R |- Ref(addr, j) [i] => Invalid_LVal ;;

    addr' = addr + i * stride
    i < j
    ---------------------------------------------- :: array_ref_valid
    R |- Ref(addr, j) [i] => LVal(addr') ;;

    e1[rval] has a left value type
    e1 = LVal(addr) \/ e1 = Invalid_LVal
    -------------------------------------------- :: alval_array_ander
    R |- e1[rval] => * operator&[](&e1, rval) ;;

    R |- e -> e' ; E ; S
    e != LVal(addr)
    e != Invalid_LVal
    e != e1[e2]
    -------------------- :: alval_generic_reduce
    R |- e => e' ; E ; S

defn
R |- e -> e' ; E ; S :: :: exec_expr :: '' {{com Small-step reduction on expressions}} {{tex [[R]] \vdash [[e]] \xrightarrow[ [[S]] ]{[[E]]} [[e']]}} by

    ------------------------------------------------------ :: and_true
    R |- true && dpid e -> JoinExpr(e) ;; push(true, dpid)

    --------------------------- :: and_false
    R |- false && dpid e -> false ;;

    R |- e0 -> e0' ; E ; S
    -------------------------------------------- :: and_reduce
    R |- e0 && dpid e1 -> e0' && dpid e1 ; E ; S

    ------------------------------ :: or_true
    R |- true || dpid e -> true ;;

    -------------------------------------------------------- :: or_false
    R |- false || dpid e -> JoinExpr(e) ;; push(false, dpid)

    R |- e0 -> e0' ; E ; S
    -------------------------------------------- :: or_reduce
    R |- e0 || dpid e1 -> e0' || dpid e1 ; E ; S

    ------------------------------------------------------------ :: ternary_true
    R |- true ? dpid e1 : e2 -> JoinExpr(e1) ;; push(true, dpid)

    -------------------------------------------------------------- :: ternary_false
    R |- false ? dpid e1 : e2 -> JoinExpr(e2) ;; push(false, dpid)

    R |- e0 -> e0' ; E ; S
    ---------------------------------------------------- :: ternary_reduce
    R |- e0 ? dpid e1 : e2 -> e0' ? dpid e1 : e2 ; E ; S

    ---------------------- :: comma_next
    R |- rval, e1 -> e1 ;;

    R |- e0 -> e0' ; E ; S
    ------------------------------ :: comma_reduce
    R |- e0, e1 -> e0', e1 ; E ; S

    ------------------ :: parens_exec
    R |- ( e ) -> e ;;

    ----------------------- :: not_true
    R |- ! true -> false ;;

    ----------------------- :: not_false
    R |- ! false -> true ;;

    --------------------------------- :: deref_ptr
    R |- * Ptr(addr) -> LVal(addr) ;;

    ------------------------------ :: deref_null_invalid
    R |- * null -> Invalid_LVal ;;

    --------------------------- :: deref_null_trap
    R |- * null -> TrapValue ;;

    R |- e -> e' ; E ; S
    ------------------------ :: deref_reduce
    R |- * e -> * e' ; E ; S

    R |- e => e' ; E ; S
    ------------------------ :: take_ptr_reduce
    R |- & e -> & e' ; E ; S

    -------------------------------- :: take_ptr_lval
    R |- & LVal(addr) -> Ptr(addr);;

    ----------------------------- :: take_ptr_invalid_null
    R |- & Invalid_LVal -> null;;

    --------------------------------- :: take_ptr_invalid_trap
    R |- & Invalid_LVal -> TrapValue;;

    e != LVal(addr)
    e != Invalid_LVal
    R |- e -> e' ; E ; S
    ------------------------ :: make_ref_reduce
    R |- @ e -> @ e' ; E ; S

    ----------------------------------- :: make_ref_lval
    R |- @ LVal(addr) -> Ref(addr, i);;
    % TODO: find a way to express the fact that i is decided at compile time.. it should probably be made part of the @ expression

    ----------------------------- :: make_ref_invalid_null
    R |- @ Invalid_LVal -> null;;

    ---------------------------------- :: make_ref_invalid_trap
    R |- @ Invalid_LVal -> TrapValue;;

    R |- e1[e2] => e3 ; E ; S
    ------------------------- :: array_deref_reduce
    R |- e1[e2] -> e3 ; E ; S

    e1[e2] is an abstract left value
    ------------------------------------ :: array_deref_getter
    R |- e1[e2] -> operator[](e1, e2) ;;

    R |- e1.foo => e2 ; E ; S
    ------------------------- :: dot_reduce
    R |- e1.foo -> e2 ; E ; S

    e1.foo is an abstract left value
    ---------------------------------- :: dot_getter
    R |- e1.foo -> operator.foo(e1) ;;

    x -> val in R
    ---------------- :: environment_access
    R |- x -> val ;;

    rv = Default(tval)
    -------------------------- :: load_invalid_default
    R |- Invalid_LVal -> rv ;;

    --------------------------------- :: load_invalid_trap
    R |- Invalid_LVal -> TrapValue ;;

    rval a valid value for this type
    ---------------------------------------- :: load_valid
    R |- LVal(addr) -> rval ; addr -> rval ;

    rval1 not a valid value for this type
    rval2 a valid value for this type
    ------------------------------------------ :: load_invalid
    R |- LVal(addr) -> rval2 ; addr -> rval1 ;

    R |- e0 => e0' ; E ; S
    -------------------------------- :: assign_left_reduce
    R |- e0 = e1 -> e0' = e1 ; E ; S

    R |- e1 -> e1' ; E ; S
    e0 is an abstract left value
    -------------------------------- :: assign_right_reduce
    R |- e0 = e1 -> e0 = e1' ; E ; S

    ----------------------------------------------- :: assign_execute
    R |- LVal(addr) = rval -> rval ; addr <- rval ;

    ----------------------------------- :: assign_invalid_ignore
    R |- Invalid_LVal = rval -> rval ;;

    ---------------------------------------- :: assign_invalid_trap
    R |- Invalid_LVal = rval -> TrapValue ;;

    e3.foo is an abstract left value
    ---------------------------------------------------- :: assign_setter
    R |- e3.foo = rval -> e3 = operator.foo=(e3, rval);;

    e3[e4] is an abstract left value
    ------------------------------------------------------ :: assign_indexed_setter
    R |- e3[e4] = rval -> e3 = operator[]=(e3, e4, rval);;

    R |- e -> e' ; E ; S
    -------------------------------------------------------------------------------------- :: call_reduce
    R |- fid(rv'0, .., rv'm, e, e0, .., ek) -> fid(rv'0, .., rv'm, e', e0, .., ek) ; E ; S

    fid -> (y0:addr0, .., ym:addrm) {s0 .. sk}
    E = Sequence(addr0 <- rv'0, .., addrm <- rv'm)
    R' = R[y0 -> LVal(addr0), .., ym -> LVal(addrm)]
    ---------------------------------------------------- :: call_resolve
    R |- fid(rv'0, .., rv'm) -> Call {R' s0 .. sk} ; E ;

    R |- s -> s' ; E ; S
    ------------------------------ :: call_construct_reduce
    R |- Call s -> Call s' ; E ; S

    --------------------------------- :: call_return
    R |- Call return rval; -> rval ;;

    ---------------------------- :: call_return_void
    R |- Call return; -> Void ;;

    ------------------------- :: call_end_function
    R |- Call {R'} -> Void ;;

    R |- e => e' ; E ; S
    ---------------------------------- :: postfix_incr_reduce
    R |- e++ -> e' ++ ; E ; S

    e is an abstract left value
    addr = freshAddress()
    ----------------------------------------------------------------------- :: postfix_incr_elim
    R |- e++ -> LVal(addr) = e, e = operator+(LVal(addr), 1), LVal(addr) ;;

    R |- e1 => e1' ; E ; S
    ---------------------------------- :: plus_equal_reduce
    R |- e1 += e2 -> e1' += e2 ; E ; S

    e1 is an abstract left value
    ------------------------------------------ :: plus_equal_elim
    R |- e1 += e2 -> e1 = operator+(e1, e2) ;;

    e != val
    R |- e -> e' ; E ; S
    ---------------------------------------- :: join_expr_reduce
    R |- JoinExpr(e) -> JoinExpr(e') ; E ; S

    ------------------------------------ :: join_expr_elim
    R |- JoinExpr(val) -> val ;; pop()

defn
R |- s -> s' ; E ; S :: :: exec_stmt :: '' {{com Small-step reduction on statements}} {{tex [[R]] \vdash [[s]] \xrightarrow[ [[S]] ]{[[E]]} [[s']]}} by

    ----------------------------- :: block_annotate
    R |- {s0..sn} -> {R s0..sn};;

    R |- s -> s' ; E ; S
    --------------------------------------------- :: block_reduce
    Rout |- {R s s1..sn} -> {R s' s1..sn} ; E ; S

    --------------------------------------- :: block_next_stmt
    Rout |- {R {R'} s1..sn} -> {R s1..sn};;

    s = break; \/ s = continue; \/ s = fallthrough; \/ s = return rval; \/ s = return;
    ---------------------------------------------------------------------------------- :: block_terminator
    Rout |- {R s s1..sn} -> s;;

    R' = R[x -> LVal(sid)]
    rv = Default(tval)
    ------------------------------------------------------------- :: block_vdecl
    Rout |- {R tval x : sid; s1..sn} -> {R' s1..sn} ; sid <- rv ;

    R[x -> LVal(sid)] |- e -> e' ; E ; S
    ----------------------------------------------------------------------------- :: block_vdecl_reduce
    Rout |- {R tval x : sid = e; s1..sn} -> {R tval x : sid = e'; s1..sn} ; E ; S

    R' = R[x -> LVal(sid)]
    ------------------------------------------------------------------ :: block_vdecl_complete
    Rout |- {R tval x : sid = rv; s1..sn} -> {R' s1..sn} ; sid <- rv ;

    R |- e -> e' ; E ; S
    ---------------------- :: effectful_expr_reduce
    R |- e; -> e'; ; E ; S

    ------------------- :: effectful_expr_elim
    R |- rval; -> {} ;;

    R |- e -> e' ; E ; S
    ------------------------------------ :: return_reduce
    R |- return e; -> return e'; ; E ; S

    R |- e -> e' ; E ; S
    ------------------------------------------------------------ :: if_reduce
    R |- if dpid (e) s else s' -> if dpid (e') s else s' ; E ; S

    ------------------------------------------------------------ :: if_true
    R |- if dpid (true) s else s' -> Join(s) ;; push(true, dpid)
    
    --------------------------------------------------------------- :: if_false
    R |- if dpid (false) s else s' -> Join(s') ;; push(false, dpid)

    ----------------------------------------------------------------------------------- :: do_while_loop
    R |- do dpid s while(e); -> Loop(s, {}, if dpid (e) do dpid s while(e); else {}) ;;

    -------------------------------------------------------------------------------------- :: for_loop
    R |- for dpid (; e ; e' ) s -> if dpid (e) Loop(s, e';, for dpid (;e;e') s) else {} ;;

    R |- s1 -> s1' ; E ; S
    -------------------------------------------------- :: loop_reduce
    R |- Loop(s1, s2, s3) -> Loop(s1', s2, s3) ; E ; S

    --------------------------------- :: loop_break
    R |- Loop(break;, s2, s3) -> {};;

    s1 = {R'} \/ s1 = continue;
    -------------------------------- :: loop_next_iteration
    R |- Loop(s1, {R''}, s2) -> s2;;

    s1 = {R'} \/ s1 = continue;
    R |- s2 -> s2' ; E ; S
    -------------------------------------------------- :: loop_increment
    R |- Loop(s1, s2, s3) -> Loop(s1, s2', s3) ; E ; S
    
    s1 = fallthrough; \/ s1 = return; \/ s1 = return rval;
    ------------------------------------------------------ :: loop_other_terminator
    R |- Loop(s1, s2, s3) -> s1;;

    R |- e -> e' ; E ; S
    ---------------------------------------------------------------------------------------------------------- :: switch_reduce
    R |- switch dpid (e) {sc0:sblock0 .. scn:sblockn} -> switch dpid (e') {sc0:sblock0 .. scn:sblockn} ; E ; S

%TODO: the next two rules don't fit on the page. I should find a way to compact them. Maybe with the </xi//i/> notation? 
    s = {sblock} /\ s0 = {sblock'0} /\ .. /\ sm = {sblock'm}
    ------------------------------------------------------------------------------------------------------------------------------------------- :: switch_case_found
    R |- switch dpid (rv) {sc0:sblock0 .. scn:sblockn case rv: sblock sc'0:sblock'0 .. sc'm:sblock'm} -> Cases(s, s0, .., sm) ;; push(rv, dpid)

    rv not in sc0 .. scn
    rv not in sc'0 .. sc'm
    s = {sblock} /\ s0 = {sblock'0} /\ .. /\ sm = {sblock'm}
    ------------------------------------------------------------------------------------------------------------------------------------------- :: switch_default
    R |- switch dpid (rv) {sc0:sblock0 .. scn:sblockn default: sblock sc'0:sblock'0 .. sc'm:sblock'm} -> Cases(s, s0, .., sm) ;; push(rv, dpid)

    R |- s -> s' ; E ; S
    ---------------------------------------------------------- :: cases_reduce
    R |- Cases(s, s0, .., sn) -> Cases(s', s0, .., sn) ; E ; S

    ----------------------------------------------------------- :: cases_fallthrough
    R |- Cases(fallthrough;, s0, .., sn) -> Cases(s0, .., sn);;

    --------------------------------------------- :: cases_break
    R |- Cases(break;, s0, .., sn) -> {} ;; pop()

    s = continue; \/ s = return; \/ s = return rval;
    ------------------------------------------------ :: cases_other_terminator
    R |- Cases(s, s0, .., sn) -> s ;; pop()

    R |- s -> s' ; E ; S
    -------------------------------- :: join_reduce
    R |- Join(s) -> Join(s') ; E ; S

    s = break; \/ s = continue; \/ s = fallthrough; \/ s = return; \/ s = return e; \/ s = {R }
    ------------------------------------------------------------------------------------------- :: join_elim
    R |- Join(s) -> s ;; pop()
